// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  abilityLevel  AbilityLevel   @default(BEGINNER)
  hamstring     Boolean        @default(false)
  quad          Boolean        @default(false)
  patellar      Boolean        @default(false)
  userExercises UserExercise[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

enum AbilityLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model BodyPart {
  id        Int        @id @default(autoincrement())
  name      String
  exercises Exercise[]
}

model Exercise {
  id            Int            @id @default(autoincrement())
  name          String
  setRepScheme  String?
  description   String?
  abilityLevel  AbilityLevel
  bodyPart      BodyPart       @relation(fields: [bodyPartId], references: [id])
  bodyPartId    Int
  userExercises UserExercise[]
}

model UserExercise {
  userId     String
  exerciseId Int
  completed  Boolean  @default(false)
  timestamp  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@id([userId, exerciseId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
